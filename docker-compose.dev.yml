services:
  postgres:
    image: postgres:16-alpine
    container_name: budgetwise-postgres
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - db-network

  backend:
    build: ./backend
    container_name: budgetwise-backend
    environment:
      - DATABASE_URL=postgresql+psycopg://${DB_USER}:${DB_PASSWORD}@postgres:${DB_PORT:-5432}/${DB_NAME}
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend:/app
      - backend_venv:/app/.venv
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - db-network
      - webapp
    develop:
      watch:
        - action: restart
          path: ./backend/app
        - action: restart
          path: ./backend/alembic
        - action: restart
          path: ./backend/alembic.ini
        - action: rebuild
          path: ./backend/pyproject.toml

  # Dev: run Next.js with hot reload; mount the source
  frontend:
    build:
      context: ./frontend
      target: deps # deps stage has pnpm available
    container_name: budgetwise-frontend
    working_dir: /app
    environment:
      - API_BASE_URL=${API_BASE_URL}
      - NEXT_TELEMETRY_DISABLED=1
    command: >
      sh -lc "test -d node_modules ||
      pnpm install --frozen-lockfile --yes; pnpm dev"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - webapp
    develop:
      watch:
        - action: restart
          path: ./frontend
          ignore:
            - node_modules/
            - .next/
            - .turbo/
            - .git/
        - action: rebuild
          path: ./frontend/pnpm-lock.yaml
        - action: rebuild
          path: ./frontend/package.json

volumes:
  postgres_data:
  backend_venv:
  frontend_node_modules:

networks:
  db-network:
    driver: bridge
    internal: false
  webapp:
    driver: bridge
